@{
    ViewData["Title"] = "Gestión de Inscripciones y Asistencias";
    Layout = "_Layout_Admin";
}

<style>
    .dashboard-wrapper {
        background-color: #ffffff;
        min-height: 100vh;
        padding: 30px;
    }

    .dashboard-header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 20px;
    }

    .page-title {
        font-size: 2rem;
        font-weight: 700;
        color: #1b5e3a;
        padding-bottom: 0.75rem;
        border-bottom: 3px solid #4caf50;
        flex-basis: 100%;
        margin-bottom: 1.5rem;
    }

    .filter-wrapper {
        position: relative;
        width: 100%;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }



    .filter-icon-btn {
        width: 45px;
        height: 45px;
        background: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.08);
    }

    .filter-icon-btn:hover {
        background: #f5f5f5;
        border-color: #4CAF50;
    }

    .filter-icon-btn svg {
        width: 24px;
        height: 24px;
    }

    .filter-dropdown {
        position: absolute;
        top: 55px;
        right: 0;
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        padding: 20px;
        min-width: 320px;
        display: none;
        z-index: 1000;
    }

    .filter-dropdown.active {
        display: block;
    }

    .filter-dropdown h4 {
        margin: 0 0 15px 0;
        font-size: 16px;
        color: #2c3e50;
        font-weight: 600;
    }

    .filter-form-group {
        margin-bottom: 15px;
    }

    .filter-form-group label {
        display: block;
        font-size: 13px;
        color: #7f8c8d;
        margin-bottom: 6px;
        font-weight: 500;
    }

    .filter-form-group input[type="date"] {
        width: 100%;
        padding: 10px 12px;
        border: 1px solid #e0e0e0;
        border-radius: 6px;
        font-size: 14px;
        transition: border-color 0.3s;
    }

    .filter-form-group input[type="date"]:focus {
        outline: none;
        border-color: #4CAF50;
    }

    .filter-actions {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .filter-btn {
        flex: 1;
        padding: 10px;
        border: none;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .filter-btn-apply {
        background: #4CAF50;
        color: white;
    }

    .filter-btn-apply:hover {
        background: #45a049;
    }

    .filter-btn-clear {
        background: #f5f5f5;
        color: #7f8c8d;
    }

    .filter-btn-clear:hover {
        background: #e9ecef;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-box {
        background: #ffffff;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(45, 122, 79, 0.1);
        text-align: center;
        transition: all 0.3s ease;
        border-left: 4px solid #4caf50;
    }

    .stat-box:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(45, 122, 79, 0.15);
        border-left-color: #2d7a4f;
    }

    .stat-number {
        font-size: 42px;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 8px;
    }

    .stat-text {
        font-size: 18px;
        color: #7f8c8d;
        font-weight: 500;
    }

    .content-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 25px;
    }

    @@media (max-width: 968px) {
        .content-grid {
            grid-template-columns: 1fr;
        }
    }

    .card {
        background: white;
        padding: 25px;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }

    .card-header {
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 18px;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 20px;
        padding: 10px;
        background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
        border-radius: 6px;
    }


    .eventos-list {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .evento-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 8px;
        transition: all 0.3s;
    }

    .evento-row:hover {
        background: #e9ecef;
        transform: translateX(3px);
    }

    .evento-details h4 {
        margin: 0 0 5px 0;
        font-size: 15px;
        color: #2c3e50;
        font-weight: 600;
    }

    .evento-details p {
        margin: 0;
        font-size: 13px;
        color: #7f8c8d;
    }

    .estado-badge {
        padding: 6px 16px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        white-space: nowrap;
    }

    .badge-activo {
        background: #4CAF50;
        color: white;
    }

    .badge-inactivo {
        background: #6c757d;
        color: white;
    }

    .chart-section {
        text-align: center;
    }

    .donut-container {
        position: relative;
        width: 300px;
        height: 300px;
        margin: 0 auto 30px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }

    .donut-container:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(45, 122, 79, 0.15);
    }

    .donut-svg {
        transform: rotate(-90deg);
    }

    .chart-center-text {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        text-align: center;
    }

    .chart-total-label {
        font-size: 16px;
        color: #7f8c8d;
        margin-bottom: 5px;
    }

    .chart-total-number {
        font-size: 48px;
        font-weight: 700;
        color: #2c3e50;
    }

    .legend-grid {
        display: flex;
        justify-content: center;
        gap: 50px;
        flex-wrap: wrap;
    }

    .legend-box {
        text-align: center;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        cursor: pointer;
    }

    .legend-box:hover {
        transform: translateY(-4px);
        box-shadow: 0 6px 16px rgba(45, 122, 79, 0.15);
    }

    .legend-box:hover .legend-icon-box {
        transform: scale(1.2);
        transition: transform 0.3s ease, background 0.3s ease;
    }

    .legend-icon-box {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 10px;
        font-size: 28px;
        font-weight: bold;
    }

    .icon-success {
        background: #4CAF50;
        color: white;
    }

    .icon-danger {
        background: #f44336;
        color: white;
    }

    .legend-number {
        font-size: 32px;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 5px;
    }

    .legend-label {
        font-size: 11px;
        color: #7f8c8d;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        margin-bottom: 3px;
    }

    .legend-percentage {
        font-size: 13px;
        color: #95a5a6;
        font-weight: 600;
    }

    .empty-message {
        text-align: center;
        padding: 40px;
        color: #95a5a6;
        font-style: italic;
    }
</style>

<div class="dashboard-wrapper">
    <div class="dashboard-header-section">
        <h2 class="page-title">Gestión de Inscripciones y Asistencias</h2>

        <div class="filter-wrapper">
            <button type="button" class="filter-icon-btn" onclick="toggleFilterDropdown(this)">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                </svg>
            </button>

            <div class="filter-dropdown" id="filterDropdown">
                <h4>Filtros de rango de fechas</h4>
                <form method="get" id="filterForm">
                    <div class="filter-form-group">
                        <label for="fechaInicio">Fecha Inicio</label>
                        <input type="date"
                               id="fechaInicio"
                               name="fechaInicio"
                               value="@ViewBag.FechaInicio.ToString("yyyy-MM-dd")" />
                    </div>

                    <div class="filter-form-group">
                        <label for="fechaFin">Fecha Fin</label>
                        <input type="date"
                               id="fechaFin"
                               name="fechaFin"
                               value="@ViewBag.FechaFin.ToString("yyyy-MM-dd")" />
                    </div>

                    <div class="filter-actions">
                        <button type="button" class="filter-btn filter-btn-clear" onclick="clearFilters()">
                            Limpiar
                        </button>
                        <button type="submit" class="filter-btn filter-btn-apply">
                            Aplicar
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>


    <div class="stats-container">
        <div class="stat-box">
            <div class="stat-number">@ViewBag.TotalEventos</div>
            <div class="stat-text">Eventos en total</div>
        </div>

        <div class="stat-box">
            <div class="stat-number">@ViewBag.TotalInscripciones</div>
            <div class="stat-text">Inscripciones totales</div>
        </div>

        <div class="stat-box">
            <div class="stat-number">@ViewBag.TotalAsistencias</div>
            <div class="stat-text">Asistencias totales</div>
        </div>
    </div>


    <div class="content-grid">
        <div class="card">


            <div class="card-header">
                <span style="white-space: nowrap;">Próximos Eventos</span>
                <div class="filter-wrapper">
                    <button type="button" class="filter-icon-btn" onclick="toggleFilterDropdown(this)">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                        </svg>
                    </button>
                    <div class="filter-dropdown">
                        <h4>Filtrar por día</h4>
                        <form id="formFiltroEventos" onsubmit="filtrarEventos(event)">
                            <div class="filter-form-group">
                                <label for="fechaFiltro">Selecciona un día</label>
                                <input type="date"
                                       id="fechaFiltro"
                                       name="fechaFiltro"
                                       value="@DateTime.Now.ToString("yyyy-MM-dd")" />
                            </div>
                            <div class="filter-actions">
                                <button type="button" class="filter-btn filter-btn-clear" onclick="clearFechaFiltro()">
                                    Limpiar
                                </button>
                                <button type="submit" class="filter-btn filter-btn-apply">
                                    Aplicar
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>



            <div class="eventos-list" id="listaEventos">
                @if (ViewBag.ProximosEventos != null && ViewBag.ProximosEventos.Count > 0)
                {
                    foreach (var evento in ViewBag.ProximosEventos)
                    {
                        <div class="evento-row">
                            <div class="evento-details">
                                <h4>@evento.nombre</h4>
                                <p>@evento.totalInscripciones inscrito(s)</p>
                            </div>
                            <div class="estado-badge @(evento.esActivo ? "badge-activo" : "badge-inactivo")">
                                @evento.estadoNombre
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-message">
                        No hay próximos eventos programados
                    </div>
                }
            </div>
        </div>

        <div class="card">
            <div class="card-header">Resumen</div>
            <div class="chart-section">
                @{
                    int eventosActivos = ViewBag.EventosActivos;
                    int eventosCancelados = ViewBag.EventosCancelados;
                    int total = eventosActivos + eventosCancelados;
                    double porcentajeActivos = total > 0 ? (double)eventosActivos / total * 100 : 0;
                    double porcentajeCancelados = total > 0 ? (double)eventosCancelados / total * 100 : 0;

                    double radius = 70;
                    double circumference = 2 * Math.PI * radius;
                    double activosLength = (porcentajeActivos / 100) * circumference;
                    double canceladosLength = (porcentajeCancelados / 100) * circumference;
                }

                <div class="donut-container">
                    <svg class="donut-svg" width="300" height="300" viewBox="0 0 200 200">

                        <circle cx="100" cy="100" r="@radius"
                                fill="none"
                                stroke="#e0e0e0"
                                stroke-width="30" />


                        <circle cx="100" cy="100" r="@radius"
                                fill="none"
                                stroke="#4CAF50"
                                stroke-width="30"
                                stroke-dasharray="@activosLength @circumference"
                                stroke-linecap="round" />


                        <circle cx="100" cy="100" r="@radius"
                                fill="none"
                                stroke="#f44336"
                                stroke-width="30"
                                stroke-dasharray="@canceladosLength @circumference"
                                stroke-dashoffset="-@activosLength"
                                stroke-linecap="round" />
                    </svg>

                    <div class="chart-center-text">
                        <div class="chart-total-label">Total</div>
                        <div class="chart-total-number">@total</div>
                    </div>
                </div>

                <div class="legend-grid">
                    <div class="legend-box">
                        <div class="legend-icon-box icon-success">✓</div>
                        <div class="legend-number">@eventosActivos</div>
                        <div class="legend-label">Eventos activos</div>
                        <div class="legend-percentage">@porcentajeActivos.ToString("F1")%</div>
                    </div>

                    <div class="legend-box">
                        <div class="legend-icon-box icon-danger">✕</div>
                        <div class="legend-number">@eventosCancelados</div>
                        <div class="legend-label">Eventos inactivos</div>
                        <div class="legend-percentage">@porcentajeCancelados.ToString("F1")%</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function toggleFilterDropdown(button) {
        const wrapper = button.closest('.filter-wrapper');
        const dropdown = wrapper.querySelector('.filter-dropdown');
        dropdown.classList.toggle('active');
    }

    function clearFilters() {
        window.location.href = '@Url.Action("Dashboard", "Admin")';
    }

    function clearFechaFiltro() {
        window.location.reload();
    }

    function filtrarEventos(event) {
        event.preventDefault();

        const fechaFiltro = document.getElementById('fechaFiltro').value;

        if (!fechaFiltro) {
            alert('Por favor selecciona una fecha');
            return;
        }

        cargarEventos(fechaFiltro);

        const dropdown = document.querySelector('.filter-dropdown');
        dropdown.classList.remove('active');
    }

    function cargarEventos(fechaFiltro) {
        const listaEventos = document.getElementById('listaEventos');


        listaEventos.innerHTML = '<div class="empty-message">Cargando eventos...</div>';


        let url = '@Url.Action("ObtenerEventosPorFecha", "Admin")';
        if (fechaFiltro) {
            url += `?fechaFiltro=${fechaFiltro}`;
        }


        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    window.location.href = '@Url.Action("Autenticar", "Login")';
                    return;
                }

                if (data.success && data.eventos && data.eventos.length > 0) {

                    let html = '';
                    data.eventos.forEach(evento => {
                        const badgeClass = evento.esActivo ? 'badge-activo' : 'badge-inactivo';
                        html += `
                                <div class="evento-row">
                                    <div class="evento-details">
                                        <h4>${evento.nombre}</h4>
                                        <p>${evento.totalInscripciones} inscrito(s)</p>
                                    </div>
                                    <div class="estado-badge ${badgeClass}">
                                        ${evento.estadoNombre}
                                    </div>
                                </div>
                            `;
                    });
                    listaEventos.innerHTML = html;
                } else {
                    listaEventos.innerHTML = '<div class="empty-message">No hay eventos para la fecha seleccionada</div>';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                listaEventos.innerHTML = '<div class="empty-message" style="color: #f44336;">Error al cargar los eventos</div>';
            });
    }


    document.addEventListener('click', function (event) {
        document.querySelectorAll('.filter-wrapper').forEach(wrapper => {
            const dropdown = wrapper.querySelector('.filter-dropdown');
            const btn = wrapper.querySelector('.filter-icon-btn');

            if (!wrapper.contains(event.target)) {
                dropdown.classList.remove('active');
            }
        });
    });
</script>

