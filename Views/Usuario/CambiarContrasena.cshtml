@using Microsoft.AspNetCore.Http
@{
    Layout = "_Layout_Usuario";
    ViewData["Title"] = "Cambiar Contraseña";
}

<style>
    :root {
        --primary-green: #2e7d32;
        --secondary-green: #4caf50;
        --light-green: #e8f5e9;
        --dark-green: #1b5e20;
        --accent-green: #81c784;
        --text-dark: #1e3a1f;
        --text-light: #4a6b4b;
        --border-green: #a5d6a7;
        --success-green: #388e3c;
        --warning-amber: #f57c00;
        --amber-light: #fff8e1;
        --amber-dark: #ffa000;
    }

    .dashboard-header {
        background: linear-gradient(135deg, var(--primary-green) 0%, var(--dark-green) 100%);
        color: white;
        padding: 2rem;
        border-radius: 12px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(46, 125, 50, 0.2);
    }

    .dashboard-title {
        font-size: 2.2rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .dashboard-subtitle {
        font-size: 1.1rem;
        opacity: 0.9;
        margin: 0;
    }

    .tasks-section {
        background: linear-gradient(135deg, #f1f8e9 0%, #e8f5e9 100%);
        border: 2px solid var(--border-green);
        border-radius: 16px;
        box-shadow: 0 6px 20px rgba(76, 175, 80, 0.15);
        overflow: hidden;
        max-width: 600px;
        margin: 0 auto;
    }

    .section-header {
        background: linear-gradient(135deg, var(--secondary-green) 0%, var(--primary-green) 100%);
        padding: 1.5rem 2.5rem;
        color: white;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .profile-section {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        border: 1px solid var(--border-green);
        box-shadow: 0 2px 8px rgba(129, 199, 132, 0.1);
    }

    .profile-section-title {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--dark-green);
        margin-bottom: 1.5rem;
        padding-bottom: 0.75rem;
        border-bottom: 2px solid var(--light-green);
        display: flex;
        align-items: center;
    }

    .profile-field {
        margin-bottom: 1.5rem;
    }

    .profile-label {
        font-weight: 600;
        color: var(--text-dark);
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        font-size: 0.95rem;
    }

    .profile-input {
        border: 2px solid #e0e0e0;
        border-radius: 8px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #fafdfa;
    }

        .profile-input:focus {
            border-color: var(--secondary-green);
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
            background: white;
        }

        .profile-input.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.1);
        }

        .profile-input.is-valid {
            border-color: var(--success-green);
            box-shadow: 0 0 0 3px rgba(56, 142, 60, 0.1);
        }

    .validation-error {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
        display: block;
    }

    .btn-warning {
        background: linear-gradient(135deg, var(--warning-amber) 0%, var(--amber-dark) 100%);
        border: none;
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        color: white;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(245, 124, 0, 0.3);
    }

        .btn-warning:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(245, 124, 0, 0.4);
            background: linear-gradient(135deg, var(--amber-dark) 0%, #f57c00 100%);
            color: white;
        }

    .btn-secondary {
        background: white;
        border: 2px solid var(--border-green);
        border-radius: 8px;
        padding: 0.75rem 2rem;
        font-weight: 600;
        color: var(--text-dark);
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
    }

        .btn-secondary:hover {
            background: var(--light-green);
            border-color: var(--secondary-green);
            color: var(--dark-green);
            transform: translateY(-1px);
        }

    .alert {
        border-radius: 10px;
        border: none;
        padding: 1.25rem;
        margin-bottom: 2rem;
    }

    .alert-danger {
        background: linear-gradient(135deg, #ffebee 0%, #ffcdd2 100%);
        color: #c62828;
        border-left: 4px solid #f44336;
    }

    .profile-actions {
        background: white;
        padding: 1.5rem 2rem;
        border-top: 2px solid var(--light-green);
        border-radius: 0 0 12px 12px;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        align-items: center;
    }

    .form-text {
        color: var(--text-light) !important;
        font-size: 0.85rem;
    }

    .password-strength {
        margin-top: 0.5rem;
        padding: 0.5rem;
        border-radius: 6px;
        font-size: 0.875rem;
        display: none;
    }

    .password-weak {
        background: #ffebee;
        color: #c62828;
        border-left: 3px solid #f44336;
    }

    .password-medium {
        background: #fff3e0;
        color: #ef6c00;
        border-left: 3px solid #ff9800;
    }

    .password-strong {
        background: #e8f5e9;
        color: var(--success-green);
        border-left: 3px solid var(--success-green);
    }

    .security-tips {
        background: var(--light-green);
        border: 1px solid var(--border-green);
        border-radius: 8px;
        padding: 1rem 1.5rem;
        margin-top: 1.5rem;
    }

        .security-tips h6 {
            color: var(--dark-green);
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .security-tips ul {
            margin: 0;
            padding-left: 1.5rem;
            color: var(--text-light);
        }

        .security-tips li {
            margin-bottom: 0.25rem;
            font-size: 0.875rem;
        }
</style>

<div class="tasks-section">
    <div class="section-header">
        <h2 class="section-title">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
            Cambiar contraseña
        </h2>
    </div>

    <div style="padding: 2rem 2.5rem;">
        <form asp-action="CambiarContrasena" method="post" class="password-form" id="cambiarContrasenaForm">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    <h5 style="color: #c62828; margin-bottom: 1rem;">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Por favor, corrige los siguientes errores:
                    </h5>
                    <ul style="margin: 0; padding-left: 1.5rem;">
                        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                        {
                            <li>@error.ErrorMessage</li>
                        }
                    </ul>
                </div>
            }

            <div class="profile-section">
                <div class="profile-field">
                    <label for="contrasenaActual" class="profile-label">
                        <i class="fas fa-lock" style="margin-right: 0.5rem; color: var(--primary-green);"></i>
                        Contraseña Actual *
                    </label>
                    <input type="password" id="contrasenaActual" name="contrasenaActual"
                           class="form-control profile-input @(ViewData.ModelState["contrasenaActual"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Ingresa tu contraseña actual" required />
                    @if (ViewData.ModelState["contrasenaActual"]?.Errors.Count > 0)
                    {
                        <span class="validation-error">@ViewData.ModelState["contrasenaActual"].Errors[0].ErrorMessage</span>
                    }
                </div>

                <div class="profile-field">
                    <label for="nuevaContrasena" class="profile-label">
                        <i class="fas fa-lock" style="margin-right: 0.5rem; color: var(--primary-green);"></i>
                        Nueva Contraseña *
                    </label>
                    <input type="password" id="nuevaContrasena" name="nuevaContrasena"
                           class="form-control profile-input @(ViewData.ModelState["nuevaContrasena"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Ingresa tu nueva contraseña" required />
                    <div id="passwordStrength" class="password-strength"></div>
                    <small class="form-text text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        Mínimo 6 caracteres, máximo 100 caracteres
                    </small>
                    @if (ViewData.ModelState["nuevaContrasena"]?.Errors.Count > 0)
                    {
                        <span class="validation-error">@ViewData.ModelState["nuevaContrasena"].Errors[0].ErrorMessage</span>
                    }
                </div>

                <div class="profile-field">
                    <label for="confirmarContrasena" class="profile-label">
                        <i class="fas fa-lock" style="margin-right: 0.5rem; color: var(--primary-green);"></i>
                        Confirmar Nueva Contraseña *
                    </label>
                    <input type="password" id="confirmarContrasena" name="confirmarContrasena"
                           class="form-control profile-input @(ViewData.ModelState["confirmarContrasena"]?.Errors.Count > 0 ? "is-invalid" : "")"
                           placeholder="Confirma tu nueva contraseña" required />
                    <div id="passwordMatchMessage" class="mt-2" style="display: none;"></div>
                </div>

                <!-- Consejos de seguridad -->
                <div class="security-tips">
                    <h6>
                        <i class="fas fa-shield-alt" style="color: var(--primary-green);"></i>
                        Consejos para una contraseña segura:
                    </h6>
                    <ul>
                        <li>Usa al menos 8 caracteres</li>
                        <li>Combina letras, números y símbolos</li>
                        <li>Incluye mayúsculas y minúsculas</li>
                        <li>Evita información personal fácil de adivinar</li>
                    </ul>
                </div>
            </div>

            <!-- Botones de Acción -->
            <div class="profile-actions">
                <div class="action-buttons">
                    <a href="@Url.Action("MiPerfil")" class="btn-secondary">
                        <i class="fas fa-times" style="margin-right: 0.5rem;"></i>
                        Cancelar
                    </a>
                    <button type="submit" class="btn-warning" id="submitButton">
                        <i class="fas fa-sync-alt" style="margin-right: 0.5rem;"></i>
                        Actualizar Contraseña
                    </button>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const nuevaContrasena = document.getElementById('nuevaContrasena');
            const confirmarContrasena = document.getElementById('confirmarContrasena');
            const passwordMatchMessage = document.getElementById('passwordMatchMessage');
            const passwordStrength = document.getElementById('passwordStrength');
            const submitButton = document.getElementById('submitButton');

            function validarFortalezaContrasena(contrasena) {
                let fortaleza = 0;
                let mensaje = '';
                let clase = '';

                if (contrasena.length === 0) {
                    passwordStrength.style.display = 'none';
                    return;
                }

                if (contrasena.length >= 6) fortaleza++;
                if (contrasena.length >= 8) fortaleza++;
                if (/[A-Z]/.test(contrasena)) fortaleza++;
                if (/[0-9]/.test(contrasena)) fortaleza++;
                if (/[^A-Za-z0-9]/.test(contrasena)) fortaleza++;

                if (fortaleza <= 2) {
                    mensaje = '<i class="fas fa-exclamation-triangle"></i> Contraseña débil';
                    clase = 'password-weak';
                } else if (fortaleza <= 4) {
                    mensaje = '<i class="fas fa-check-circle"></i> Contraseña media';
                    clase = 'password-medium';
                } else {
                    mensaje = '<i class="fas fa-shield-alt"></i> Contraseña fuerte';
                    clase = 'password-strong';
                }

                passwordStrength.innerHTML = mensaje;
                passwordStrength.className = `password-strength ${clase}`;
                passwordStrength.style.display = 'block';
            }

            function validarCoincidenciaContrasenas() {
                const contrasena1 = nuevaContrasena.value;
                const contrasena2 = confirmarContrasena.value;

                if (contrasena2 === '') {
                    passwordMatchMessage.style.display = 'none';
                    return;
                }

                if (contrasena1 === contrasena2) {
                    passwordMatchMessage.innerHTML = '<span class="text-success"><i class="fas fa-check-circle"></i> Las contraseñas coinciden</span>';
                    passwordMatchMessage.style.display = 'block';
                    confirmarContrasena.classList.remove('is-invalid');
                    confirmarContrasena.classList.add('is-valid');
                } else {
                    passwordMatchMessage.innerHTML = '<span class="text-danger"><i class="fas fa-times-circle"></i> Las contraseñas no coinciden</span>';
                    passwordMatchMessage.style.display = 'block';
                    confirmarContrasena.classList.remove('is-valid');
                    confirmarContrasena.classList.add('is-invalid');
                }
            }

            if (nuevaContrasena && confirmarContrasena) {
                nuevaContrasena.addEventListener('input', function () {
                    validarFortalezaContrasena(this.value);
                    validarCoincidenciaContrasenas();
                });

                confirmarContrasena.addEventListener('input', validarCoincidenciaContrasenas);
            }

            // Validación del formulario antes de enviar
            const form = document.getElementById('cambiarContrasenaForm');
            form.addEventListener('submit', function (e) {
                const contrasena1 = nuevaContrasena.value;
                const contrasena2 = confirmarContrasena.value;

                if (contrasena1 !== contrasena2) {
                    e.preventDefault();
                    passwordMatchMessage.innerHTML = '<span class="text-danger"><i class="fas fa-exclamation-triangle"></i> Las contraseñas no coinciden. Por favor, verifica los campos.</span>';
                    passwordMatchMessage.style.display = 'block';
                    confirmarContrasena.focus();
                } else if (contrasena1.length < 6) {
                    e.preventDefault();
                    alert('La nueva contraseña debe tener al menos 6 caracteres.');
                    nuevaContrasena.focus();
                }
            });

            // Efectos visuales adicionales
            const inputs = document.querySelectorAll('.profile-input');
            inputs.forEach(input => {
                input.addEventListener('focus', function () {
                    this.parentElement.classList.add('focused');
                });

                input.addEventListener('blur', function () {
                    this.parentElement.classList.remove('focused');
                });
            });
        });
    </script>
}
